plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'jacoco'
}

group = 'com.katchup'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Acutator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Swagger UI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

// jacoco
jacoco {
	toolVersion = "0.8.13"
}

jacocoTestReport {
	dependsOn test

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}

	reports {
		xml.required = true
		html.required = true
		csv.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [
					'**/XXXApplication.class'
			] + Qdomains)
		}))
	}
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
		Qdomains.add(qPattern + "*")
	}

	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			excludes = ['*.XXXApplication'] + Qdomains
		}
	}
}

tasks.register('testAndGenerateReport') {
	group 'verification'
	description 'test w/ jacoco'

	dependsOn ':test', ':jacocoTestReport', ':jacocoTestCoverageVerification'

	tasks.jacocoTestReport.mustRunAfter tasks.test
	tasks.jacocoTestCoverageVerification.mustRunAfter tasks.jacocoTestReport
}

tasks.named('test') {
	useJUnitPlatform()
}

// spotless
spotless {
	java {
		// import 순서 정의
		importOrder(
				"java",
				"javax",
				"lombok",
				"org.springframework",
				"",
				"\\#",
				"org.junit",
				"\\#org.junit",
				"com.guide",
				"\\#com.guide"
		)
		removeUnusedImports() // 사용하지 않는 import 제거
		googleJavaFormat()         // 구글 자바 포맷 적용
		indentWithTabs(2)
		indentWithSpaces(4)
		trimTrailingWhitespace() // 공백 제거
		endWithNewline()         // 끝부분 New Line 처리
	}
}

tasks.register('updateGitHooks', Copy) {
	from new File(rootProject.rootDir, 'scripts/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
	if (System.getProperty('os.name').toLowerCase().contains('windows')) {
		Runtime.getRuntime().exec("cmd /c chmod -R +x .git/hooks/")
	} else {
		Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
	}
}

tasks.named('compileJava') {
	dependsOn 'spotlessApply'
	dependsOn 'updateGitHooks'
}